 
- NOTES -

- PART 2 -

    - RENDERING A COLLECTION, MODULES -

    - Console log:

        console.log('props value is', props) -> if props is an object

            "props value is [object Object]"

    - Javascripts arrays:

        Key-attribute: the list items, i.e. the elements generated by the map method, must each have a unique key value: an attribute called key.

        const App = (props) => {
            const { notes } = props

            return (
                <div>
                <h1>Notes</h1>
                <ul>
                    {notes.map(note =>
                    <li key={note.id}>
                        {note.content}
                    </li>
                    )}
                </ul>
                </div>
            )
        }

        React uses the key attributes of objects in an array to determine how to update the view generated by a component when the component is re-rendered.

        Map:

            map always creates a new array, the elements of which have been created from the elements of the original array by mapping: using the function given as a parameter to the map method.


        Anti-pattern: Array Indexes as Keys:

            The indexes can be retrieved by passing a second parameter to the callback function of the map method:

                notes.map((note, i) => ...)

            When called like this, i is assigned the value of the index of the position in the array where the note resides.

            the key attribute must be defined for the components, and not for the JSX items like before.

                const Note = ({ note }) => {
                    return (
                        <li>{note.content}</li>
                    )
                }

                const App = ({ notes }) => {
                    return (
                        <div>
                            <h1>Notes</h1>
                            <ul>
                                {notes.map(note =>
                                    <Note key={note.id} note={note} />
                                )}
                            </ul>
                        </div>
                    )
                }

            // is better to created a global variable for the id's or use the id's from the given list

        Refactoring Modules:

            In smaller applications, components are usually placed in a directory called components, which is in turn placed within the src directory. The convention is to name the file after the component.

                const Note = ({ note }) => {
                    return (
                        <li>{note.content}</li>
                    )
                }

                export default Note

                import Note from './components/Note'

                const App = ({ notes }) => {
                    // ...
                }

                When importing our own components, their location must be given in relation to the importing file:

                The period - . - in the beginning refers to the current directory, so the module's location is a file called Note.jsx in the components sub-directory of the current directory. The filename extension .jsx can be omitted.


    - FORMS -

        The event handler immediately calls the event.preventDefault() method, which prevents the default action of submitting a form. The default action would, among other things, cause the page to reload.

         We must never mutate state directly in React!

        const result = condition ? val1 : val2

        We showed the comparison operator first to emphasize an important detail: in JavaScript val1 == val2 does not always work as expected. When performing comparisons, it's therefore safer to exclusively use val1 === val2


    - Getting data from server -

        - promises:

            A Promise is an object representing the eventual completion or failure of an asynchronous operation.

            In other words, a promise is an object that represents an asynchronous operation. A promise can have three distinct states:

                The promise is pending: It means that the final value (one of the following two) is not available yet.

                The promise is fulfilled: It means that the operation has been completed and the final value is available, which generally is a successful operation. This state is sometimes also called resolved.

                The promise is rejected: It means that an error prevented the final value from being determined, which generally represents a failed operation.

            const promise = axios.get('http://localhost:3001/notes')

            promise.then(response => {
                console.log(response)
            })

            The JavaScript runtime environment calls the callback function registered by the then method providing it with a response object as a parameter. The response object contains all the essential data related to the response of an HTTP GET request, which would include the returned data, status code, and headers

            A more readable way to format chained method calls is to place each call on its own line:

            axios
                .get('http://localhost:3001/notes')
                .then(response => {
                    const notes = response.data
                    console.log(notes)
                })

            The data returned by the server is plain text, basically just one long string. The axios library is still able to parse the data into a JavaScript array, since the server has specified that the data format is application/json; charset=utf-8 (see the previous image) using the content-type header.

        Effect-hooks

            The Effect Hook lets you perform side effects on function components. Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.

            useEffect(() => {
                axios
                    .get('http://localhost:3001/notes')
                    .then(response => {
                        setNotes(response.data)
                    })
            }, [])

            Now we can see more clearly that the function useEffect takes two parameters. The first is a function, the effect itself. According to the documentation:

                By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.

            The second parameter of useEffect is used to specify how often the effect is run. If the second parameter is an empty array [], then the effect is only run along with the first render of the component.






