 
- NOTES -

- PART 2 -

    - RENDERING A COLLECTION, MODULES -

    - Console log:

        console.log('props value is', props) -> if props is an object

            "props value is [object Object]"

    - Javascripts arrays:

        Key-attribute: the list items, i.e. the elements generated by the map method, must each have a unique key value: an attribute called key.

        const App = (props) => {
            const { notes } = props

            return (
                <div>
                <h1>Notes</h1>
                <ul>
                    {notes.map(note =>
                    <li key={note.id}>
                        {note.content}
                    </li>
                    )}
                </ul>
                </div>
            )
        }

        React uses the key attributes of objects in an array to determine how to update the view generated by a component when the component is re-rendered.

        Map:

            map always creates a new array, the elements of which have been created from the elements of the original array by mapping: using the function given as a parameter to the map method.


        Anti-pattern: Array Indexes as Keys:

            The indexes can be retrieved by passing a second parameter to the callback function of the map method:

                notes.map((note, i) => ...)

            When called like this, i is assigned the value of the index of the position in the array where the note resides.

            the key attribute must be defined for the components, and not for the JSX items like before.

                const Note = ({ note }) => {
                    return (
                        <li>{note.content}</li>
                    )
                }

                const App = ({ notes }) => {
                    return (
                        <div>
                            <h1>Notes</h1>
                            <ul>
                                {notes.map(note =>
                                    <Note key={note.id} note={note} />
                                )}
                            </ul>
                        </div>
                    )
                }

            // is better to created a global variable for the id's or use the id's from the given list

        Refactoring Modules:

            In smaller applications, components are usually placed in a directory called components, which is in turn placed within the src directory. The convention is to name the file after the component.

                const Note = ({ note }) => {
                    return (
                        <li>{note.content}</li>
                    )
                }

                export default Note

                import Note from './components/Note'

                const App = ({ notes }) => {
                    // ...
                }

                When importing our own components, their location must be given in relation to the importing file:

                The period - . - in the beginning refers to the current directory, so the module's location is a file called Note.jsx in the components sub-directory of the current directory. The filename extension .jsx can be omitted.


    - FORMS -

        The event handler immediately calls the event.preventDefault() method, which prevents the default action of submitting a form. The default action would, among other things, cause the page to reload.

         We must never mutate state directly in React!

        const result = condition ? val1 : val2

        We showed the comparison operator first to emphasize an important detail: in JavaScript val1 == val2 does not always work as expected. When performing comparisons, it's therefore safer to exclusively use val1 === val2





